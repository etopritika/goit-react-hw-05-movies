{"version":3,"file":"static/js/828.35a2e572.chunk.js","mappings":"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","sources":["components/SearchForm.jsx","pages/Movies.jsx","services/api-service.js"],"sourcesContent":["export default function SearchForm({handleSubmit, movieName, handleInputChange}) {\n    return (\n        <>\n          <form onSubmit={handleSubmit}>\n            <input\n              value={movieName}\n              name=\"query\"\n              onChange={handleInputChange}\n              type=\"text\"\n              autoComplete=\"off\"\n              autoFocus\n              placeholder=\"Search movies\"\n            />\n          </form>\n        </>\n      );\n}","import Notiflix from 'notiflix';\nimport { useState, useEffect } from 'react';\nimport { Link, useSearchParams, useLocation } from 'react-router-dom';\n// import Loader from '../components/Loader';\nimport SearchForm from '../components/SearchForm';\nimport ApiService from '../services/api-service';\nconst apiService = new ApiService();\n\nexport default function Movies() {\n  const [movieName, setMovieName] = useState('');\n  const [searchParams, setSearchParams] = useSearchParams({});\n  const [fetchMovies, setFetchMovies] = useState([]);\n  const name = searchParams.get(\"query\") ?? '';\n  const moviesLocation = useLocation();\n  \n  const handleSubmit = e => {\n    e.preventDefault();\n    if (movieName.trim() === '') {\n      return Notiflix.Notify.failure('Enter the name of the movie');\n    }\n    setSearchParams({ query: movieName });\n    setMovieName('');\n  };\n\n  const handleInputChange = e => {\n    setMovieName(e.currentTarget.value.toLowerCase());\n  };\n\n  useEffect(() => {\n    if(!name){\n      return;\n    }\n    apiService.query = name;\n    apiService.fetchMovies().then(response => {\n      setFetchMovies(response);\n    });\n  }, [name]);\n\n  return (\n    <>\n      <SearchForm\n        handleSubmit={handleSubmit}\n        movieName={movieName}\n        handleInputChange={handleInputChange}\n      />\n      {fetchMovies && (\n        <ul>\n          {fetchMovies.map(({ id, title }) => (\n            <Link key={id} to={`${id}`} state={moviesLocation}>\n              <li>{title}</li>\n            </Link>\n          ))}\n        </ul>\n      )}\n    </>\n  );\n}\n","import Notiflix from 'notiflix';\nconst BASE_URL = 'https://api.themoviedb.org/';\nconst API_KEY = '604d147cd55c0bcd03b68a72549a64de';\n\nexport default class ApiService {\n  constructor() {\n    this.searchQuery = 'avatar'; //Що шукаємо\n    this.page = 1; //Пагінація\n    this.getMovieId = ''; //Пошук по id\n  }\n\n  async fetchMovies() {\n    try {\n      const response = await fetch(\n        `${BASE_URL}3/search/movie?api_key=${API_KEY}&query=${this.searchQuery}&page=${this.page}&language=en-US&include_adult=false`\n      );\n\n      if (!response.ok) {\n        if (response.status === 404) {\n          throw new Error(\n            Notiflix.Notify.failure('Search result not successful. Try again')\n          );\n        }\n        return;\n      }\n\n      const { results } = await response.json();\n\n      if (results.length === 0) {\n        Notiflix.Notify.failure(\n          'Search result not successful. Enter the correct movie name.'\n        );\n        return;\n      }\n\n      return results;\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  async fetchTrending() {\n    try {\n      const response = await fetch(\n        `${BASE_URL}3/trending/movie/week?api_key=${API_KEY}&page=${this.page}&language=en-US`\n      );\n\n      if (!response.ok) {\n        throw new Error(\n          Notiflix.Notify.failure('Failed to fetch trending movies')\n        );\n      }\n\n      const { results } = await response.json();\n      return results;\n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n  async fetchDetails() {\n    try {\n      const response = await fetch(\n        `${BASE_URL}3/movie/${this.getMovieId}?api_key=${API_KEY}&language=en-US`\n      );\n\n      if (!response.ok) {\n        throw new Error(\n          Notiflix.Notify.failure('Failed to fetch movie details')\n        );\n      }\n\n      const results = await response.json();\n      return results;\n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n  async fetchCast() {\n    try {\n      const response = await fetch(\n        `${BASE_URL}3/movie/${this.getMovieId}/credits?api_key=${API_KEY}`\n      );\n\n      if (!response.ok) {\n        throw new Error(\n          Notiflix.Notify.failure('Failed to fetch movie details')\n        );\n      }\n\n      const { cast } = await response.json();\n      return cast;\n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n  async fetchReviews() {\n    try {\n      const response = await fetch(\n        `${BASE_URL}3/movie/${this.getMovieId}/reviews?api_key=${API_KEY}`\n      );\n\n      if (!response.ok) {\n        throw new Error(\n          Notiflix.Notify.failure('Failed to fetch movie details')\n        );\n      }\n\n      const { results } = await response.json();\n      return results;\n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n  incrementPage() {\n    this.page = this.page + 1;\n  }\n  decrementPage() {\n    this.page = this.page - 1;\n  }\n  resetPage() {\n    this.page = 1;\n  }\n\n  get query() {\n    return this.searchQuery;\n  }\n  set query(newQuery) {\n    this.searchQuery = newQuery;\n  }\n\n  get movieId() {\n    return this.getMovieId;\n  }\n  set movieId(newID) {\n    this.getMovieId = newID;\n  }\n  get moviePage() {\n    return this.page;\n  }\n\n  set moviePage(newPage) {\n    this.page = newPage;\n  }\n}\n\n// const apiService = new ApiService();\n\n// apiService.fetchMovies().then(console.log);\n"],"names":["SearchForm","handleSubmit","movieName","handleInputChange","onSubmit","value","name","onChange","type","autoComplete","autoFocus","placeholder","apiService","ApiService","Movies","useState","setMovieName","useSearchParams","searchParams","setSearchParams","fetchMovies","setFetchMovies","get","moviesLocation","useLocation","useEffect","query","then","response","e","preventDefault","trim","Notiflix","currentTarget","toLowerCase","map","id","title","to","state","BASE_URL","API_KEY","this","searchQuery","page","getMovieId","fetch","ok","status","Error","json","results","length","console","log","error","cast","newQuery","newID","newPage"],"sourceRoot":""}
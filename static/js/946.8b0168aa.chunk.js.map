{"version":3,"file":"static/js/946.8b0168aa.chunk.js","mappings":"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","sources":["pages/Home.styled.js","pages/Home.jsx","services/api-service.js"],"sourcesContent":["import styled from \"styled-components\";\n\nexport const Container = styled.div`\n  display: flex;\n  flex-direction: flex-colomn;\n`;","import \"./Home.styled\";\nimport { useEffect, useState } from 'react';\nimport { Link, useLocation } from 'react-router-dom';\nimport ApiService from '../services/api-service';\nconst apiService = new ApiService();\n\nexport default function Home() {\n  const [movies, setMovies] = useState([]);\n  const homeLocation = useLocation();\n\n  useEffect(() => {\n    apiService.fetchTrending().then(response => setMovies(response));\n  }, []);\n\n  return (\n    <>\n      <h1>Trending today</h1>\n      {movies.map(({ id, title }) => {\n        return (\n          <Link key={id} to={`movies/${id}`} state={homeLocation}>\n            {title}\n          </Link>\n        );\n      })}\n    </>\n  );\n}\n","import Notiflix from 'notiflix';\nconst BASE_URL = 'https://api.themoviedb.org/';\nconst API_KEY = '604d147cd55c0bcd03b68a72549a64de';\n\nexport default class ApiService {\n  constructor() {\n    this.searchQuery = 'avatar'; //Що шукаємо\n    this.page = 1; //Пагінація\n    this.getMovieId = ''; //Пошук по id\n  }\n\n  async fetchMovies() {\n    try {\n      const response = await fetch(\n        `${BASE_URL}3/search/movie?api_key=${API_KEY}&query=${this.searchQuery}&page=${this.page}&language=en-US&include_adult=false`\n      );\n\n      if (!response.ok) {\n        if (response.status === 404) {\n          throw new Error(\n            Notiflix.Notify.failure('Search result not successful. Try again')\n          );\n        }\n        return;\n      }\n\n      const { results } = await response.json();\n\n      if (results.length === 0) {\n        Notiflix.Notify.failure(\n          'Search result not successful. Enter the correct movie name.'\n        );\n        return;\n      }\n\n      return results;\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  async fetchTrending() {\n    try {\n      const response = await fetch(\n        `${BASE_URL}3/trending/movie/week?api_key=${API_KEY}&page=${this.page}&language=en-US`\n      );\n\n      if (!response.ok) {\n        throw new Error(\n          Notiflix.Notify.failure('Failed to fetch trending movies')\n        );\n      }\n\n      const { results } = await response.json();\n      return results;\n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n  async fetchDetails() {\n    try {\n      const response = await fetch(\n        `${BASE_URL}3/movie/${this.getMovieId}?api_key=${API_KEY}&language=en-US`\n      );\n\n      if (!response.ok) {\n        throw new Error(\n          Notiflix.Notify.failure('Failed to fetch movie details')\n        );\n      }\n\n      const results = await response.json();\n      return results;\n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n  async fetchCast() {\n    try {\n      const response = await fetch(\n        `${BASE_URL}3/movie/${this.getMovieId}/credits?api_key=${API_KEY}`\n      );\n\n      if (!response.ok) {\n        throw new Error(\n          Notiflix.Notify.failure('Failed to fetch movie details')\n        );\n      }\n\n      const { cast } = await response.json();\n      return cast;\n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n  async fetchReviews() {\n    try {\n      const response = await fetch(\n        `${BASE_URL}3/movie/${this.getMovieId}/reviews?api_key=${API_KEY}`\n      );\n\n      if (!response.ok) {\n        throw new Error(\n          Notiflix.Notify.failure('Failed to fetch movie details')\n        );\n      }\n\n      const { results } = await response.json();\n      return results;\n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n  incrementPage() {\n    this.page = this.page + 1;\n  }\n  decrementPage() {\n    this.page = this.page - 1;\n  }\n  resetPage() {\n    this.page = 1;\n  }\n\n  get query() {\n    return this.searchQuery;\n  }\n  set query(newQuery) {\n    this.searchQuery = newQuery;\n  }\n\n  get movieId() {\n    return this.getMovieId;\n  }\n  set movieId(newID) {\n    this.getMovieId = newID;\n  }\n  get moviePage() {\n    return this.page;\n  }\n\n  set moviePage(newPage) {\n    this.page = newPage;\n  }\n}\n\n// const apiService = new ApiService();\n\n// apiService.fetchMovies().then(console.log);\n"],"names":["styled","apiService","ApiService","Home","useState","movies","setMovies","homeLocation","useLocation","useEffect","fetchTrending","then","response","map","id","title","to","state","BASE_URL","API_KEY","this","searchQuery","page","getMovieId","fetch","ok","status","Error","Notiflix","json","results","length","console","log","error","cast","newQuery","newID","newPage"],"sourceRoot":""}
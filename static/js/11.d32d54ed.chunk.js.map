{"version":3,"file":"static/js/11.d32d54ed.chunk.js","mappings":"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","sources":["components/BackLink.styled.js","components/BackLink.jsx","pages/MoviesDetails.styled.js","pages/MovieDetails.jsx","services/api-service.js"],"sourcesContent":["import styled from \"styled-components\";\nimport { Link } from \"react-router-dom\";\n\nexport const StyledLink = styled(Link)`\n  display: inline-flex;\n  align-items: center;\n  gap: 4px;\n  padding: 8px 0;\n  color: black;\n  text-decoration: none;\n  font-weight: 500;\n  text-transform: uppercase;\n  max-width: 160px;\n\n  :hover {\n    color: orangered;\n  }\n`;","import { StyledLink } from \"./BackLink.styled\";\n\nexport default function BackLink({ to, children }){\n  return (\n    <StyledLink to={to}>\n      {children}\n    </StyledLink>\n  );\n};\n","import styled from 'styled-components';\n\nexport const Container = styled.div`\n  display: flex;\n  margin-bottom: 20px;\n  > img {\n    margin-right: 10px;\n  }\n`;\n\nexport const ListItem = styled.li`\n  margin-bottom: 20px;\n  &:last-child {\n    margin-bottom: 0px;\n  }\n`;\n\nexport const GenresList = styled.ul`\n  display: flex;\n`;\n\nexport const GenresItem = styled.ul`\nmargin-right: 10px;\n&:last-child {\n  margin-right: 0px;\n}\n`;\n\nexport const InfoList = styled.ul`\n  display: flex;\n  margin-bottom: 10px;\n  > li {\n    margin-right: 10px;\n    &:last-child {\n      margin-right: 0px;\n    }\n  }\n`;\n","import { Suspense, useEffect, useState, useRef } from 'react';\nimport { useParams, Link, Outlet, useLocation } from 'react-router-dom';\nimport BackLink from '../components/BackLink';\nimport { HiArrowLeft } from 'react-icons/hi';\nimport Loader from '../components/Loader';\nimport {\n  Container,\n  ListItem,\n  GenresList,\n  GenresItem,\n  InfoList\n} from './MoviesDetails.styled';\nimport ApiService from '../services/api-service';\nconst apiService = new ApiService();\n\nexport default function MovieDetails() {\n  const [movie, setMovie] = useState({});\n  const [status, setStatus] = useState('idle');\n  const { movieId } = useParams();\n  const location = useLocation();\n  const refLocation = useRef(location);\n\n  useEffect(() => {\n    setStatus('pending');\n    apiService.movieId = movieId;\n    apiService\n      .fetchDetails()\n      .then(response => {\n        setStatus('resolved');\n        setMovie(response);\n      })\n      .catch(console.log);\n  }, [movieId]);\n\n  const {\n    original_title,\n    poster_path,\n    vote_average,\n    overview,\n    genres,\n    release_date,\n  } = movie;\n  const date = new Date(release_date);\n  const year = date.getFullYear();\n\n  if (status === 'pending') {\n    return <Loader />;\n  }\n\n  if (status === 'resolved') {\n    return (\n      <>\n        <BackLink to={refLocation.current.state}>\n          <HiArrowLeft size=\"24\" />\n          Back to movies\n        </BackLink>\n        <Container>\n          <img src={`https://image.tmdb.org/t/p/w400/${poster_path}`} alt=\"\" />\n          <ul>\n            <ListItem>\n              <b>\n                {original_title} ({year})\n              </b>\n            </ListItem>\n            <ListItem>User score: {(vote_average * 10).toFixed(0)}%</ListItem>\n            <ListItem>\n              <b>Overview</b>\n              <br /> {overview}\n            </ListItem>\n            <ListItem>\n              <b>Genres:</b>\n              <GenresList>\n                {genres.map(({ name }) => {\n                  return <GenresItem key={name}>{name}</GenresItem>;\n                })}\n              </GenresList>\n            </ListItem>\n          </ul>\n        </Container>\n        <p>Additional informationk</p>\n        <InfoList>\n          <li>\n            <Link to=\"cast\">Cast</Link>\n          </li>\n          <li>\n            <Link to=\"reviews\">Reviews</Link>\n          </li>\n        </InfoList>\n        <Suspense fallback={<Loader />}>\n          <Outlet />\n        </Suspense>\n      </>\n    );\n  }\n}\n","import Notiflix from 'notiflix';\nconst BASE_URL = 'https://api.themoviedb.org/';\nconst API_KEY = '604d147cd55c0bcd03b68a72549a64de';\n\nexport default class ApiService {\n  constructor() {\n    this.searchQuery = 'avatar'; //Що шукаємо\n    this.page = 1; //Пагінація\n    this.getMovieId = ''; //Пошук по id\n  }\n\n  async fetchMovies() {\n    try {\n      const response = await fetch(\n        `${BASE_URL}3/search/movie?api_key=${API_KEY}&query=${this.searchQuery}&page=${this.page}&language=en-US&include_adult=false`\n      );\n\n      if (!response.ok) {\n        if (response.status === 404) {\n          throw new Error(\n            Notiflix.Notify.failure('Search result not successful. Try again')\n          );\n        }\n        return;\n      }\n\n      const { results } = await response.json();\n\n      if (results.length === 0) {\n        Notiflix.Notify.failure(\n          'Search result not successful. Enter the correct movie name.'\n        );\n        return;\n      }\n\n      return results;\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  async fetchTrending() {\n    try {\n      const response = await fetch(\n        `${BASE_URL}3/trending/movie/week?api_key=${API_KEY}&page=${this.page}&language=en-US`\n      );\n\n      if (!response.ok) {\n        throw new Error(\n          Notiflix.Notify.failure('Failed to fetch trending movies')\n        );\n      }\n\n      const { results } = await response.json();\n      return results;\n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n  async fetchDetails() {\n    try {\n      const response = await fetch(\n        `${BASE_URL}3/movie/${this.getMovieId}?api_key=${API_KEY}&language=en-US`\n      );\n\n      if (!response.ok) {\n        throw new Error(\n          Notiflix.Notify.failure('Failed to fetch movie details')\n        );\n      }\n\n      const results = await response.json();\n      return results;\n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n  async fetchCast() {\n    try {\n      const response = await fetch(\n        `${BASE_URL}3/movie/${this.getMovieId}/credits?api_key=${API_KEY}`\n      );\n\n      if (!response.ok) {\n        throw new Error(\n          Notiflix.Notify.failure('Failed to fetch movie details')\n        );\n      }\n\n      const { cast } = await response.json();\n      return cast;\n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n  async fetchReviews() {\n    try {\n      const response = await fetch(\n        `${BASE_URL}3/movie/${this.getMovieId}/reviews?api_key=${API_KEY}`\n      );\n\n      if (!response.ok) {\n        throw new Error(\n          Notiflix.Notify.failure('Failed to fetch movie details')\n        );\n      }\n\n      const { results } = await response.json();\n      return results;\n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n  incrementPage() {\n    this.page = this.page + 1;\n  }\n  decrementPage() {\n    this.page = this.page - 1;\n  }\n  resetPage() {\n    this.page = 1;\n  }\n\n  get query() {\n    return this.searchQuery;\n  }\n  set query(newQuery) {\n    this.searchQuery = newQuery;\n  }\n\n  get movieId() {\n    return this.getMovieId;\n  }\n  set movieId(newID) {\n    this.getMovieId = newID;\n  }\n  get moviePage() {\n    return this.page;\n  }\n\n  set moviePage(newPage) {\n    this.page = newPage;\n  }\n}\n\n// const apiService = new ApiService();\n\n// apiService.fetchMovies().then(console.log);\n"],"names":["StyledLink","styled","Link","BackLink","to","children","Container","ListItem","GenresList","GenresItem","InfoList","apiService","ApiService","MovieDetails","useState","movie","setMovie","status","setStatus","movieId","useParams","location","useLocation","refLocation","useRef","useEffect","fetchDetails","then","response","catch","console","log","original_title","poster_path","vote_average","overview","genres","release_date","year","Date","getFullYear","Loader","current","state","size","src","alt","toFixed","map","name","Suspense","fallback","BASE_URL","API_KEY","this","searchQuery","page","getMovieId","fetch","ok","Error","Notiflix","json","results","length","error","cast","newQuery","newID","newPage"],"sourceRoot":""}
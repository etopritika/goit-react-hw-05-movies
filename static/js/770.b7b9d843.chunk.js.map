{"version":3,"file":"static/js/770.b7b9d843.chunk.js","mappings":"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","sources":["components/Cast.styled.js","components/Cast.jsx","services/api-service.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const CastItem = styled.li`\n  margin-bottom: 15px;\n  &:last-child {\n    margin-bottom: 0px;\n  }\n`;\n","import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { CastItem } from './Cast.styled';\nimport ApiService from '../services/api-service';\nconst apiService = new ApiService();\n\nexport default function Cast() {\n  const [actors, setActors] = useState([]);\n  const { movieId } = useParams();\n  useEffect(() => {\n    apiService.movieId = movieId;\n    apiService\n      .fetchCast()\n      .then(response => setActors(response))\n      .catch(console.log);\n  }, [movieId]);\n  return (\n    <ul>\n      {actors.map(({ profile_path, name, character }) => {\n        return (\n          <CastItem key={name}>\n            <ul>\n              <li>\n                <img\n                  src={\n                    profile_path === null\n                      ? 'http://dummyimage.com/200'\n                      : `https://image.tmdb.org/t/p/w200/${profile_path}`\n                  }\n                  alt=\"\"\n                />\n              </li>\n              <li>{name}</li>\n              <li>Character: {character}</li>\n            </ul>\n          </CastItem>\n        );\n      })}\n    </ul>\n  );\n}\n","import Notiflix from 'notiflix';\nconst BASE_URL = 'https://api.themoviedb.org/';\nconst API_KEY = '604d147cd55c0bcd03b68a72549a64de';\n\nexport default class ApiService {\n  constructor() {\n    this.searchQuery = 'avatar'; //Що шукаємо\n    this.page = 1; //Пагінація\n    this.getMovieId = ''; //Пошук по id\n  }\n\n  async fetchMovies() {\n    try {\n      const response = await fetch(\n        `${BASE_URL}3/search/movie?api_key=${API_KEY}&query=${this.searchQuery}&page=${this.page}&language=en-US&include_adult=false`\n      );\n\n      if (!response.ok) {\n        if (response.status === 404) {\n          throw new Error(\n            Notiflix.Notify.failure('Search result not successful. Try again')\n          );\n        }\n        return;\n      }\n\n      const { results } = await response.json();\n\n      if (results.length === 0) {\n        Notiflix.Notify.failure(\n          'Search result not successful. Enter the correct movie name.'\n        );\n        return;\n      }\n\n      return results;\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  async fetchTrending() {\n    try {\n      const response = await fetch(\n        `${BASE_URL}3/trending/movie/week?api_key=${API_KEY}&page=${this.page}&language=en-US`\n      );\n\n      if (!response.ok) {\n        throw new Error(\n          Notiflix.Notify.failure('Failed to fetch trending movies')\n        );\n      }\n\n      const { results } = await response.json();\n      return results;\n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n  async fetchDetails() {\n    try {\n      const response = await fetch(\n        `${BASE_URL}3/movie/${this.getMovieId}?api_key=${API_KEY}&language=en-US`\n      );\n\n      if (!response.ok) {\n        throw new Error(\n          Notiflix.Notify.failure('Failed to fetch movie details')\n        );\n      }\n\n      const results = await response.json();\n      return results;\n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n  async fetchCast() {\n    try {\n      const response = await fetch(\n        `${BASE_URL}3/movie/${this.getMovieId}/credits?api_key=${API_KEY}`\n      );\n\n      if (!response.ok) {\n        throw new Error(\n          Notiflix.Notify.failure('Failed to fetch movie details')\n        );\n      }\n\n      const { cast } = await response.json();\n      return cast;\n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n  async fetchReviews() {\n    try {\n      const response = await fetch(\n        `${BASE_URL}3/movie/${this.getMovieId}/reviews?api_key=${API_KEY}`\n      );\n\n      if (!response.ok) {\n        throw new Error(\n          Notiflix.Notify.failure('Failed to fetch movie details')\n        );\n      }\n\n      const { results } = await response.json();\n      return results;\n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n  incrementPage() {\n    this.page = this.page + 1;\n  }\n  decrementPage() {\n    this.page = this.page - 1;\n  }\n  resetPage() {\n    this.page = 1;\n  }\n\n  get query() {\n    return this.searchQuery;\n  }\n  set query(newQuery) {\n    this.searchQuery = newQuery;\n  }\n\n  get movieId() {\n    return this.getMovieId;\n  }\n  set movieId(newID) {\n    this.getMovieId = newID;\n  }\n  get moviePage() {\n    return this.page;\n  }\n\n  set moviePage(newPage) {\n    this.page = newPage;\n  }\n}\n\n// const apiService = new ApiService();\n\n// apiService.fetchMovies().then(console.log);\n"],"names":["CastItem","styled","apiService","ApiService","Cast","useState","actors","setActors","movieId","useParams","useEffect","fetchCast","then","response","catch","console","log","map","profile_path","name","character","src","alt","BASE_URL","API_KEY","this","searchQuery","page","getMovieId","fetch","ok","status","Error","Notiflix","json","results","length","error","cast","newQuery","newID","newPage"],"sourceRoot":""}
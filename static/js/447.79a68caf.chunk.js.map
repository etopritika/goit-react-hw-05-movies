{"version":3,"file":"static/js/447.79a68caf.chunk.js","mappings":"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","sources":["components/Reviews.styled.js","components/Reviews.jsx","services/api-service.js"],"sourcesContent":["import styled from \"styled-components\";\n\nexport const ReviewItem = styled.li`\n    margin-bottom: 15px;\n    &:last-child{\n        margin-bottom: 0px;\n    }\n`;","import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { ReviewItem } from \"./Reviews.styled\";\nimport ApiService from '../services/api-service';\nconst apiService = new ApiService();\n\nexport default function Reviews() {\n  const [reviews, setReviews] = useState([]);\n  const { movieId } = useParams();\n  useEffect(() => {\n    apiService.movieId = movieId;\n    apiService\n      .fetchReviews()\n      .then(response => setReviews(response))\n      .catch(console.log);\n  }, [movieId]);\n  return (\n    <>\n      {reviews.length !== 0 && (\n        <ul>\n          {reviews.map(({ author, content }) => {\n            return (\n              <ReviewItem key={author}>\n                <span><b>{author}</b></span>\n                <br />\n                {content}\n              </ReviewItem>\n            );\n          })}\n        </ul>\n      )}\n    </>\n  );\n}\n","import Notiflix from 'notiflix';\nconst BASE_URL = 'https://api.themoviedb.org/';\nconst API_KEY = '604d147cd55c0bcd03b68a72549a64de';\n\nexport default class ApiService {\n  constructor() {\n    this.searchQuery = 'avatar'; //Що шукаємо\n    this.page = 1; //Пагінація\n    this.getMovieId = ''; //Пошук по id\n  }\n\n  async fetchMovies() {\n    try {\n      const response = await fetch(\n        `${BASE_URL}3/search/movie?api_key=${API_KEY}&query=${this.searchQuery}&page=${this.page}&language=en-US&include_adult=false`\n      );\n\n      if (!response.ok) {\n        if (response.status === 404) {\n          throw new Error(\n            Notiflix.Notify.failure('Search result not successful. Try again')\n          );\n        }\n        return;\n      }\n\n      const { results } = await response.json();\n\n      if (results.length === 0) {\n        Notiflix.Notify.failure(\n          'Search result not successful. Enter the correct movie name.'\n        );\n        return;\n      }\n\n      return results;\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  async fetchTrending() {\n    try {\n      const response = await fetch(\n        `${BASE_URL}3/trending/movie/week?api_key=${API_KEY}&page=${this.page}&language=en-US`\n      );\n\n      if (!response.ok) {\n        throw new Error(\n          Notiflix.Notify.failure('Failed to fetch trending movies')\n        );\n      }\n\n      const { results } = await response.json();\n      return results;\n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n  async fetchDetails() {\n    try {\n      const response = await fetch(\n        `${BASE_URL}3/movie/${this.getMovieId}?api_key=${API_KEY}&language=en-US`\n      );\n\n      if (!response.ok) {\n        throw new Error(\n          Notiflix.Notify.failure('Failed to fetch movie details')\n        );\n      }\n\n      const results = await response.json();\n      return results;\n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n  async fetchCast() {\n    try {\n      const response = await fetch(\n        `${BASE_URL}3/movie/${this.getMovieId}/credits?api_key=${API_KEY}`\n      );\n\n      if (!response.ok) {\n        throw new Error(\n          Notiflix.Notify.failure('Failed to fetch movie details')\n        );\n      }\n\n      const { cast } = await response.json();\n      return cast;\n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n  async fetchReviews() {\n    try {\n      const response = await fetch(\n        `${BASE_URL}3/movie/${this.getMovieId}/reviews?api_key=${API_KEY}`\n      );\n\n      if (!response.ok) {\n        throw new Error(\n          Notiflix.Notify.failure('Failed to fetch movie details')\n        );\n      }\n\n      const { results } = await response.json();\n      return results;\n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n  incrementPage() {\n    this.page = this.page + 1;\n  }\n  decrementPage() {\n    this.page = this.page - 1;\n  }\n  resetPage() {\n    this.page = 1;\n  }\n\n  get query() {\n    return this.searchQuery;\n  }\n  set query(newQuery) {\n    this.searchQuery = newQuery;\n  }\n\n  get movieId() {\n    return this.getMovieId;\n  }\n  set movieId(newID) {\n    this.getMovieId = newID;\n  }\n  get moviePage() {\n    return this.page;\n  }\n\n  set moviePage(newPage) {\n    this.page = newPage;\n  }\n}\n\n// const apiService = new ApiService();\n\n// apiService.fetchMovies().then(console.log);\n"],"names":["ReviewItem","styled","apiService","ApiService","Reviews","useState","reviews","setReviews","movieId","useParams","useEffect","fetchReviews","then","response","catch","console","log","length","map","author","content","BASE_URL","API_KEY","this","searchQuery","page","getMovieId","fetch","ok","status","Error","Notiflix","json","results","error","cast","newQuery","newID","newPage"],"sourceRoot":""}
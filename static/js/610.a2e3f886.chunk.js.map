{"version":3,"file":"static/js/610.a2e3f886.chunk.js","mappings":"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","sources":["components/BackLink.jsx","pages/MovieDetails.jsx","services/api-service.js"],"sourcesContent":["import { HiArrowLeft } from \"react-icons/hi\";\nimport { Link } from \"react-router-dom\";\n// import styled from \"styled-components\";\n\n// const StyledLink = styled(Link)`\n//   display: inline-flex;\n//   align-items: center;\n//   gap: 4px;\n//   padding: 8px 0;\n//   color: black;\n//   text-decoration: none;\n//   font-weight: 500;\n//   text-transform: uppercase;\n\n//   :hover {\n//     color: orangered;\n//   }\n// `;\n\nexport default function BackLink({ to, children }){\n  return (\n    <Link to={to}>\n      <HiArrowLeft size=\"24\" />\n      {children}\n    </Link>\n  );\n};\n","import { useRef, Suspense, useEffect, useState } from 'react';\nimport { useParams, Link, Outlet, useLocation } from 'react-router-dom';\nimport BackLink from '../components/BackLink';\nimport Loader from '../components/Loader';\nimport ApiService from '../services/api-service';\nconst apiService = new ApiService();\n\nexport default function MovieDetails() {\n  const [movie, setMovie] = useState({});\n  const [status, setStatus] = useState('idle');\n  const { movieId } = useParams();\n  const location = useLocation();\n  const backLinkRef = useRef(location.state?.from ?? '/movies');\n\n  useEffect(() => {\n    setStatus('pending');\n    apiService.movieId = movieId;\n    apiService.fetchDetails().then(response => {\n      setStatus('resolved');\n      setMovie(response);\n    });\n  }, [movieId]);\n\n  const { original_title, poster_path, vote_average, overview, genres } = movie;\n  if (status === 'pending') {\n    return <Loader />;\n  }\n  if (status === 'resolved') {\n    return (\n      <>\n        <BackLink to={backLinkRef.current}>Back to movies</BackLink>\n        <div>\n          <img src={`https://image.tmdb.org/t/p/w400/${poster_path}`} alt=\"\" />\n          <ul>\n            <li>{original_title}</li>\n            <li>User score: {(vote_average * 10).toFixed(0)}%</li>\n            <li>Overview: {overview}</li>\n            <li>\n              Genres:{' '}\n              <ul>\n                {genres.map(({ name }) => {\n                    return <li key={name}>{name}</li>;\n                  })}\n              </ul>\n            </li>\n          </ul>\n        </div>\n        <ul>\n          <li>\n            <Link to=\"cast\">Cast</Link>\n          </li>\n          <li>\n            <Link to=\"reviews\">Reviews</Link>\n          </li>\n        </ul>\n        <Suspense fallback={<Loader />}>\n          <Outlet />\n        </Suspense>\n      </>\n    );\n  }\n}\n","import Notiflix from 'notiflix';\nconst BASE_URL = 'https://api.themoviedb.org/';\nconst API_KEY = '604d147cd55c0bcd03b68a72549a64de';\n\nexport default class ApiService {\n  constructor() {\n    this.searchQuery = 'avatar'; //Що шукаємо\n    this.page = 1; //Пагінація\n    this.getMovieId = ''; //Пошук по id\n  }\n\n  async fetchMovies() {\n    try {\n      const response = await fetch(\n        `${BASE_URL}3/search/movie?api_key=${API_KEY}&query=${this.searchQuery}&page=${this.page}&language=en-US&include_adult=false`\n      );\n\n      if (!response.ok) {\n        if (response.status === 404) {\n          throw new Error(\n            Notiflix.Notify.failure('Search result not successful. Try again')\n          );\n        }\n        return;\n      }\n\n      const { results } = await response.json();\n\n      if (results.length === 0) {\n        Notiflix.Notify.failure(\n          'Search result not successful. Enter the correct movie name.'\n        );\n        return;\n      }\n\n      return results;\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  async fetchTrending() {\n    try {\n      const response = await fetch(\n        `${BASE_URL}3/trending/movie/week?api_key=${API_KEY}&page=${this.page}&language=en-US`\n      );\n\n      if (!response.ok) {\n        throw new Error(\n          Notiflix.Notify.failure('Failed to fetch trending movies')\n        );\n      }\n\n      const { results } = await response.json();\n      return results;\n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n  async fetchDetails() {\n    try {\n      const response = await fetch(\n        `${BASE_URL}3/movie/${this.getMovieId}?api_key=${API_KEY}&language=en-US`\n      );\n\n      if (!response.ok) {\n        throw new Error(\n          Notiflix.Notify.failure('Failed to fetch movie details')\n        );\n      }\n\n      const results = await response.json();\n      return results;\n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n  incrementPage() {\n    this.page = this.page + 1;\n  }\n  decrementPage() {\n    this.page = this.page - 1;\n  }\n  resetPage() {\n    this.page = 1;\n  }\n\n  get query() {\n    return this.searchQuery;\n  }\n  set query(newQuery) {\n    this.searchQuery = newQuery;\n  }\n\n  get movieId() {\n    return this.getMovieId;\n  }\n  set movieId(newID) {\n    this.getMovieId = newID;\n  }\n  get moviePage() {\n    return this.page;\n  }\n\n  set moviePage(newPage) {\n    this.page = newPage;\n  }\n}\n\n// const apiService = new ApiService();\n\n// apiService.fetchMovies().then(console.log);\n"],"names":["BackLink","to","children","size","apiService","ApiService","MovieDetails","useState","movie","setMovie","status","setStatus","movieId","useParams","location","useLocation","backLinkRef","useRef","state","from","useEffect","fetchDetails","then","response","original_title","poster_path","vote_average","overview","genres","Loader","current","src","alt","toFixed","map","name","Suspense","fallback","BASE_URL","API_KEY","this","searchQuery","page","getMovieId","fetch","ok","Error","Notiflix","json","results","length","console","log","error","newQuery","newID","newPage"],"sourceRoot":""}